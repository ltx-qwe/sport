<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace 属性：用于指定当前的映射文件和哪个接口进行映射，需要指定接口的文件路径，
需要标注包的完整路径接口-->
<mapper namespace="com.example.demo.mapper.UserMapper">
    <!--自定义映射规则:resultMap 标签来完成映射规则的定义-->
    <!--
    id 属性：表示给这个映射负责分配唯一的 id 值，对应的就是 resultMap=“id 属性的值” 属性的值
    type 属性：取值时一个类，表示的是数据库中的查询结果与 java 中的哪个实体类进行
    结果集的映射
    -->
    <resultMap id="userEntityMap" type="com.example.demo.entity.User">
        <!--将表的字段和类的属性不一致的字段进行匹配指定，名称一致的字段可以省略不写
        配合完成名称不一致的映射
        column 属性：表示数据库表中的资源名称
        property：表示 java 定义类中的属性名称
        -->
        <!--在定义映射规则时主键时不可以省略的-->
        <id column="uid" property="uid"></id>
        <result column="is_delete" property="isDelete"></result>
        <result column="created_user" property="createdUser"></result>
        <result column="created_time" property="createdTime"></result>
        <result column="modified_user" property="modifiedUser"></result>
        <result column="modified_time" property="modifiedTime"></result>


    </resultMap>
    <!--id 属性：表示映射的接口中方法的名称，直接在标签内部来编写 SQL 语句-->
    <!-- useGeneratedKeys 属性：表示开启某个字段的值递增（通常主键设置为递增）
    keyProperty 属性：表示将表中的哪个字段作为主键递增
    -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="uid">
        INSERT INTO t_user
        (username,password,salt,phone,email,gender,avatar,is_delete,created_user,created_time,modified_user, modified_time)
        VALUES (#{username},#{password},#{salt}, #{phone}, #{email}, #{gender},#{avatar}, #{isDelete}, #{createdUser}, #{createdTime}, #{modifiedUser},#{modifiedTime})
    </insert>
    <!--select 语句在执行的时候，查询的结果时一个对象，多个对象-->
    <!-- resultType：表示查询的结果集类型，只需要指定对应映射类的类型，并且包含完整的
    包接口：resultType="com.example.demo.entity.user"
    resultMap:表示当表的资源和类对象属性字段不一致时，自定义查询集的映射规则
    -->
    <select id="findByUserName" resultMap="userEntityMap">
        SELECT * FROM t_user WHERE username = #{username}
    </select>

    <update id="updatePasswordByUid">
        UPDATE
            t_user
        SET
            password = #{password},
            modified_user = #{modifiedUser},
            modified_time = #{modifiedTime}
        WHERE
            uid = #{uid}
    </update>
    <!-- 根据用户id查询用户数据：User findByUid(Integer uid) -->
    <!-- 根据用户id查询用户数据：User findByUid(Integer uid) -->
    <select id="findByUid" resultMap="userEntityMap">
        SELECT * FROM t_user WHERE uid = #{uid}
    </select>


<!--     文档7-->

    <!-- 根据uid更新用户个人资料：Integer updateInfoByUid(User user) -->
    <update id="updateInfoByUid">
        UPDATE
        t_user
        SET
        <if test="phone != null">phone = #{phone},</if>
        <if test="email != null">email = #{email},</if>
        <if test="gender != null">gender = #{gender},</if>
        modified_user = #{modifiedUser},
        modified_time = #{modifiedTime}
        WHERE
        uid = #{uid}
    </update>



    <update id="updateAvatarByUid">
        UPDATE
            t_user
        SET
            avatar = #{avatar},
            modified_user = #{modifiedUser},
            modified_time = #{modifiedTime}
        WHERE
            uid = #{uid}
    </update>





</mapper>